package com.dingjh.tools.file;  import java.io.IOException; import java.io.InputStream; import java.net.URL; import java.util.Enumeration; import java.util.HashSet; import java.util.Iterator; import java.util.LinkedList; import java.util.NoSuchElementException; import java.util.Set;  public class ClassLoaderUtil {   public static Iterator<URL> getResources(String resourceName, Class<?> callingClass, boolean aggregate)     throws IOException   {     AggregateIterator iterator = new AggregateIterator();     iterator.addEnumeration(Thread.currentThread().getContextClassLoader().getResources(resourceName));     if ((!(iterator.hasNext())) || (aggregate)) {       iterator.addEnumeration(ClassLoaderUtil.class.getClassLoader().getResources(resourceName));     }     if ((!(iterator.hasNext())) || (aggregate)) {       ClassLoader cl = callingClass.getClassLoader();       if (cl != null) {         iterator.addEnumeration(cl.getResources(resourceName));       }     }     if ((!(iterator.hasNext())) && (resourceName != null) && (((resourceName.length() == 0) || (resourceName.charAt(0) != '/')))) {       return getResources('/' + resourceName, callingClass, aggregate);     }     return iterator;   } 	public static URL getResource(String resourceName, Class<?> callingClass) {		URL url = Thread.currentThread().getContextClassLoader().getResource(resourceName);		if (url == null) {			url = ClassLoaderUtil.class.getClassLoader().getResource(resourceName);		}		if (url == null) {			ClassLoader cl = callingClass.getClassLoader();			if (cl != null) {				url = cl.getResource(resourceName);			}		}		if ((url == null) && (resourceName != null)				&& (((resourceName.length() == 0) || (resourceName.charAt(0) != '/')))) {			return getResource('/' + resourceName, callingClass);		}		return url;	}    public static InputStream getResourceAsStream(String resourceName, Class<?> callingClass)   {    URL url = getResource(resourceName, callingClass);     try     {       return ((url != null) ? url.openStream() : null); } catch (IOException e) {     }     return null;   }    public static Class<?> loadClass(String className, Class<?> callingClass)     throws ClassNotFoundException   {     try     {       return Thread.currentThread().getContextClassLoader().loadClass(className);     } catch (ClassNotFoundException e) {       try {        return Class.forName(className);       } catch (ClassNotFoundException ex) {         try {           return ClassLoaderUtil.class.getClassLoader().loadClass(className); } catch (ClassNotFoundException exc) { } }     }     return callingClass.getClassLoader().loadClass(className);   }    static class AggregateIterator implements Iterator   {     LinkedList<Enumeration<?>> enums;     Enumeration<?> cur;     Object next;     Set<Object> loaded;      AggregateIterator()     {       this.enums = new LinkedList();       this.cur = null;       this.next = null;       this.loaded = new HashSet(); }      public AggregateIterator addEnumeration(Enumeration<?> e) {       if (e.hasMoreElements()) {         if (this.cur == null) {           this.cur = e;           this.next = e.nextElement();           this.loaded.add(this.next);         } else {          this.enums.add(e);         }       }       return this;     }      public boolean hasNext() {       return (this.next != null);     }      public Object next() {      if (this.next != null) {         Object prev = this.next;         this.next = loadNext();         return prev;       }      throw new NoSuchElementException();     }      private Enumeration<?> determineCurrentEnumeration()     {      if ((this.cur != null) && (!(this.cur.hasMoreElements()))) {         if (this.enums.size() > 0)           this.cur = ((Enumeration<?>)this.enums.removeLast());         else {          this.cur = null;         }       }       return this.cur;     } 		private Object loadNext() {			if (determineCurrentEnumeration() != null) {				Object tmp = this.cur.nextElement();				int loadedSize = this.loaded.size();				do {					if (!(this.loaded.contains(tmp))){						break;					}					tmp = loadNext();					if (tmp == null){						break;					}				} while (this.loaded.size() <= loadedSize);				if (tmp != null) {					this.loaded.add(tmp);				}				return tmp;			}			return null;		}		public void remove() {			throw new UnsupportedOperationException();		}   } }