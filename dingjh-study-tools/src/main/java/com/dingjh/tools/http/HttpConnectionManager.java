package com.dingjh.tools.http;import java.nio.charset.CodingErrorAction;import java.security.KeyManagementException;import java.security.KeyStoreException;import java.security.NoSuchAlgorithmException;import java.security.cert.CertificateException;import java.security.cert.X509Certificate;import java.util.ResourceBundle;import javax.net.ssl.HostnameVerifier;import javax.net.ssl.SSLContext;import javax.net.ssl.SSLSession;import org.apache.http.Consts;import org.apache.http.config.ConnectionConfig;import org.apache.http.config.MessageConstraints;import org.apache.http.config.Registry;import org.apache.http.config.RegistryBuilder;import org.apache.http.config.SocketConfig;import org.apache.http.conn.socket.ConnectionSocketFactory;import org.apache.http.conn.socket.PlainConnectionSocketFactory;import org.apache.http.conn.ssl.SSLConnectionSocketFactory;import org.apache.http.conn.ssl.TrustStrategy;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClientBuilder;import org.apache.http.impl.client.HttpClients;import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;import org.apache.http.ssl.SSLContexts;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;/** * Http连接池管理 * @author dingjianhua * @date 2014-9-18 下午10:59:11 */public class HttpConnectionManager {	private static final Logger LOGGER=LogManager.getLogger(HttpConnectionManager.class);    private static PoolingHttpClientConnectionManager connManager = null;//    private static CloseableHttpClient httpclient=null;    public static final int REQUEST_TIMEOUT ; // 设置请求超时    public static final int TIMEOUT; // 连接超时时间    public static final int SO_TIMEOUT; // 数据传输超时        static{    	ResourceBundle resource=ResourceBundle.getBundle("http-config");    	REQUEST_TIMEOUT = Integer.valueOf(resource.getString("REQUEST_TIMEOUT"));    	TIMEOUT = Integer.valueOf(resource.getString("TIMEOUT"));    	SO_TIMEOUT = Integer.valueOf(resource.getString("SO_TIMEOUT"));    }        /**      * 最大连接数      */      public final static int MAX_TOTAL_CONNECTIONS = 800;    /**      * 每个路由最大连接数      */      public final static int MAX_ROUTE_CONNECTIONS = 400;	static {		try {			SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(null, new TrustStrategy() {				@Override				public boolean isTrusted(final X509Certificate[] chain, final String authType)throws CertificateException {					return true;				}			}).build();			SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslContext, new HostnameVerifier() {				@Override				public boolean verify(String hostname, SSLSession session) {					return true;				}			});			Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder					.<ConnectionSocketFactory> create().register("http", PlainConnectionSocketFactory.INSTANCE)					.register("https", sslsf).build();			connManager = new PoolingHttpClientConnectionManager(socketFactoryRegistry);			// Create socket configuration			SocketConfig socketConfig = SocketConfig.custom().setTcpNoDelay(true).build();			connManager.setDefaultSocketConfig(socketConfig);			// Create message constraints			MessageConstraints messageConstraints = MessageConstraints.custom().setMaxHeaderCount(200)					.setMaxLineLength(2000).build();			// Create connection configuration			ConnectionConfig connectionConfig = ConnectionConfig.custom()					.setMalformedInputAction(CodingErrorAction.IGNORE)					.setUnmappableInputAction(CodingErrorAction.IGNORE).setCharset(Consts.UTF_8)					.setMessageConstraints(messageConstraints).build();			connManager.setDefaultConnectionConfig(connectionConfig);			connManager.setMaxTotal(MAX_TOTAL_CONNECTIONS);			connManager.setDefaultMaxPerRoute(connManager.getMaxTotal());			// httpclient =			// HttpClients.custom().setUserAgent("Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537.36")			// .setConnectionManager(connManager).build();		} catch (KeyManagementException e) {			LOGGER.error("KeyManagementException", e);		} catch (NoSuchAlgorithmException e) {			LOGGER.error("NoSuchAlgorithmException", e);		} catch (KeyStoreException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}         public static PoolingHttpClientConnectionManager getManager() {    	return connManager;    }        public static CloseableHttpClient getClient(){    	HttpClientBuilder clientBuilder=HttpClients.custom();    	clientBuilder.setUserAgent("Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537.36")			.setConnectionManager(connManager);		return clientBuilder.build();	}  }